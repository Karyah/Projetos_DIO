paradigma estruturado x poo

pe: representação mais simplista - alguns conceitos mais limitados. 
não representa o mundo real
foca em operações(funções) e dados. focado no como fazer

poo: representação mais realista dos conceitos do mundo real.
mais focado na modelagem de entidades e nas interações destas.
focado no que fazer

-melhor coesão
-melhor acoplamento
-diminuição do gap semântico
-coletor de lixo

A orientação a Objetos é um pardigma de análise, projeto e programaão 
de sistemas de software baseado na composição e interação entre diverasa
unidades de software chamadas de objetos.

Classe:
É uma estrutura que abstrai um conjunto de objetos com características similares.
Uma classe define o comportamento de seus objetos através de métodos e os estados
possíveis destes objetos através de atributos. Em outros termos, uma classe descev

A classe é o molde, pelo qual modelaremos o mundo real, de maneira que ela possa criar
o mundo real. ABSTRAÇÃO. 
São entidades do mundo real. 

Atributo:
É o elemento de uma classe responsável por definir sua estrutura de dados. O conjunto destes
será responsável por representar suas características e fará parte dos objetos criados a partir
da classe. Caracterização de objetos.

Atributo x Variável

atributo - o que é próprio e peculiar a alguém ou a alguma coisa.
variável - sujeito a variações ou mudanças; que pode variar; inconstante, instável.

variável dentro de método.
atributo dentro de classe. 

entender a finalidade dop atributo ajudará. 

Método: porção de código que é disponibilizada pela classe. Este é executado quando é feita 
uma requisição a ele. Um método serve para identificar serviços, ações que a classe oferece.
São responsáveis por definir e realizar um determinado comportamento.


Construtor: cria objetos. 

public Carro(){...}

é criado de forma implicita pela propria linguagem 

Destrutor: auxilia a destrução do objeto 

class Carro(){
	void finalize(){}
}

Objeto:

um objeto é a representação de um conceito/entidade do mundo ral, que pode ser física 
ou conceitual, e possui um significado definido para um determinado software. Para
esse conceito/entidade, deve ser definida inicialmente uma classe a partir da qual
posteriormente serão instânciados objetos distintos. 

Mensagem:
É o processo de ativação de um método de um objeto. Isto ocorre quando uma 
requisição (chamada) a esse método é realizada, assim disparando a execição de
seu comportamento descrito por sua classe. Pode também ser direcionada diretamente
à classe caso a requisição seja a um método estático.

carro.métoto();

Conceitos relacionais

Herança: É o relacionamento entre classes em que uma classe chamada subclasse(classe
filha, classe derivada) é uma extensão, um subtipo de outra classe chamada superclasse(classe
pai, classe mãe, classe base). Devido a isto, a subclasse consegue reaproveitar os atributos
e métodos dela. Além dos que venham a ser herdados, a subclasse pode definir seus próprios 
membros.

Upcast e Downcast.

	    func

gerente, vendedor, faxineiro

upcast - subir em sua hierarquia. transformando gerente em func. A a = new B();

B é subclasse de A

downcast - descendo em hierarquia. transformando func em gerente exemplo.

Polimorfismo: a mesma ação, se comportando diferente

Associação:

Possibilita um relacionamento entre classes/objetos no qual estes possam
pedir ajuda a outras classes/objetos e representar de forma completa o conceito ao
qual se destinam. Neste tipo de relacionament, as classes e os objetos interagem 
entre si para atingir seus objetivos.

estrutural-
se manifesta na estrutura das classes objeto.
relacionado com atributos.


Composição: "com parte todo"
pessoa tem endereço
endereço só existe se a pessoa existir
só pertence a este todo. se a pessoa deixa de existir, o endereço também deixa.

class Pessoa{
Endereco endereco;/*cria-se atributo do tipo pessoa*/
}



Agregação: "sem parte todo"
uma parte pode existir sem o outro
Disciplina / Aluno

o aluno pode estar ligado a outra disciplina. Aluno não precisa de Disciplina.

class Disciplina{
	Aluno aluno;
}


comporamental-
comportamentos, com os métodos. 

dependência - "depende de"

class Compra {

finalizar(Cupom cupom,...){}

}

Interface

Define um contrato que deve ser seguido pela classe que a implementa. 
Quando uma classe implementa uma interface, ela se compromete a realizar todos
os comportamentos que a interface disponibiliza. 

Função estática utilitária:
classes que não são orientadas a objetos pq se resumem a uma unica
razão. pe em poo
programa procedural.

ela consegue se resolver por ela mesma, sem dependências externas?

os parâmetro de entrada são simples e diretos? 

o resultado de saída també, tem que ser siples e direto

exemplo: validação de cpf/cnpj

